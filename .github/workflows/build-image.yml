---
name: Build and Push Image

permissions:
  id-token: write
  contents: read
on:
  # For automated/reusable workflow calls.
  workflow_call:
    inputs:
      env:
        description: Environment for image push
        required: false
        type: string
        # XXX: Force into dev, until we are ready to fully adopt.
        default: dev
        #default: ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
      image-name:
        description: The name of the image to build.
        required: true
        type: string
      build-args:
        description: Optional list of arguments to provide to the build.
        required: false
        type: string
      image-flavor:
        description: Image flavor, as per `docker/metadata-action`'s `flavor` input.
        required: false
        type: string
      aws-region:
        description: AWS ECR region
        required: false
        type: string
        default: ${{ vars.ECR_AWS_REGION }}
      tag:
        description: Specific tag to (re)build.
        required: false
        type: string
    outputs:
      tags:
        description: The "{image}:{tag}" image tags.
        value: ${{ jobs.build-push.outputs.tags }}
      image-info:
        description: Info about the built image.
        value: ${{ jobs.build-push.outputs.image-info }}
      image-names:
        description: Specific names for built image.
        value: ${{ jobs.build-push.outputs.image-names }}
      meta-json:
        description: Build tag/meta info, as per `docker/metadata-action`'s `json` output.
        value: ${{ jobs.build-push.outputs.meta-json }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    outputs:
      image-info: ${{ toJson(steps.image-build.outputs) }}
      image-names: ${{ toJson(steps.image-names.outputs) }}
      meta-json: ${{ steps.meta.outputs.json }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag }}
      - name: Last tag
        id: last-tag
        run: |
          if [ "${{ inputs.tag }}" != "" ] ; then
          echo "value=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
          echo "value=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
          fi
      - name: Build tag structure
        id: tag-structure
        run: |
          if [ "${{ github.event_name }}" == "pull_request" -a "${{ github.event.pull_request.merged }}" != "true" ] ; then
          cat - >> "$GITHUB_OUTPUT" <<EOF
          tags<<EOT
          type=sha
          type=ref,event=pr
          EOT
          EOF
          elif [ "${{ github.event_name }}" == "push" ] ; then
          cat - >> "$GITHUB_OUTPUT" <<EOF
          tags<<EOT
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          EOT
          EOF
          else
          TAG="${{ steps.last-tag.outputs.value }}"
          cat - >> "$GITHUB_OUTPUT" <<EOF
          tags<<EOT
          type=semver,pattern={{version}},value=$TAG
          type=semver,pattern={{major}}.{{minor}},value=$TAG
          type=semver,pattern={{major}},value=$TAG
          EOT
          EOF
          fi

          if [ "${{ github.event_name }}" == "schedule" -o "${{ github.event_name}}" == "workflow_dispatch" ] ; then
          cat - >> "$GITHUB_OUTPUT" <<EOF
          flavor<<EOFLAV
          latest=true
          suffix=-{{date 'YYYYMMDDHHmmss'}},onlatest=false
          EOFLAV
          EOF
          else
          cat - >> "$GITHUB_OUTPUT" <<EOF
          flavor=""
          EOF
          fi
      - name: Get tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_REGISTRY_URL }}/${{ inputs.image-name }}
          tags: ${{ steps.tag-structure.outputs.tags }}
          flavor: |
            ${{ inputs.image-flavor }}
            ${{ steps.tag-structure.outputs.flavor }}

      # --- Setup env
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- Configure creds
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Configure AWS prod credentials for pull
        if: ${{ inputs.env == 'dev' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_PROD_PULL_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false
      - name: Login to Amazon prod ECR for pull
        if: ${{ inputs.env == 'dev' }}
        id: login-prod-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Build and push
      - name: Build and push
        uses: docker/build-push-action@v6
        id: image-build
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ inputs.build-args }}

      - name: Extract image names
        id: image-names
        run: |
          METADATA='${{ steps.image-build.outputs.metadata }}'
          TOGETHER=$(echo "$METADATA" | jq -c '.["image.name"]')
          cat <<EOF >> $GITHUB_OUTPUT
          together=$TOGETHER
          split=$(echo "$TOGETHER" | jq -c '. | split(",")')
          EOF

      - name: Create summary
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          ## Images Pushed
          | Image  | Tags |
          | ------------- | ------------- |
          | $IMAGE_REPO | $(awk -F ":" '{print $NF}' <<< "$TAGS" | sed -z 's/\n/, /g;s/, *$/\n/' ) |
          EOF
        env:
          IMAGE_REPO: ${{ vars.DOCKER_REGISTRY_URL }}/${{ inputs.image-name }}
          TAGS: ${{ steps.meta.outputs.tags }}

